import unittest
from DigitClassifier import DigitClassifier

class TestDigitClassifier(unittest.TestCase):
    @classmethod
    def setUpClass(self):
        self.digit_classifier = DigitClassifier()

    def test_single_dimension_does_not_crash(self):
        xs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ys = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

        predicted = self.digit_classifier.classify(xs, ys)
        self.assertEqual(predicted, 1)

    def test_single_point_does_not_crash(self):
        xs = [1]
        ys = [1]

        self.digit_classifier.classify(xs, ys)

    def test_empty_input_throws(self):
        xs = []
        ys = []

        with self.assertRaises(ValueError) as context:
            self.digit_classifier.classify(xs, ys)

        self.assertTrue('Input cannot be empty' in str(context.exception))

    def test_unbalanced_input_throws(self):
        xs = [1, 2]
        ys = [1]

        with self.assertRaises(ValueError) as context:
            self.digit_classifier.classify(xs, ys)

        self.assertTrue('xs and ys must have the same length' in str(context.exception))

    def test_real_example(self):
        xs = [164, 166, 168, 171, 175, 179, 182, 185, 187, 190, 191, 192, 193, 193, 193, 193, 192, 191, 190, 189, 188, 186, 184, 183, 180, 178, 175, 173, 171, 170, 168, 167, 166, 163, 162, 159, 158, 156, 155, 154, 154, 156, 159, 165, 171, 177, 183, 187, 192, 196, 199, 202, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 220, 220, 219, 218, 217, 216, 215, 213, 211, 210, 207, 205, 202, 200, 197, 194, 191, 187, 183, 179, 175, 171, 167, 163, 159, 157, 154, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138]
        ys = [78, 79, 82, 87, 93, 99, 103, 107, 111, 116, 120, 124, 127, 130, 134, 137, 140, 143, 146, 148, 150, 153, 154, 155, 156, 156, 156, 156, 156, 155, 155, 154, 154, 153, 152, 151, 150, 149, 148, 148, 147, 147, 149, 152, 156, 159, 163, 166, 169, 172, 175, 177, 179, 181, 184, 187, 190, 193, 196, 200, 204, 207, 210, 213, 216, 219, 222, 224, 225, 226, 228, 230, 231, 232, 233, 233, 233, 233, 232, 231, 230, 229, 228, 226, 225, 223, 221, 219, 218, 216, 215, 214, 214, 213, 212, 212, 211, 210, 210, 210, 209, 208, 208, 207, 207, 207, 205]

        predicted = self.digit_classifier.classify(xs, ys)
        self.assertEqual(predicted, 3)

    def test_real_example_unbalanced(self):
        """Digits like '1' take up more space in one dimension than the other."""
        xs = [188, 187, 187, 187, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 185, 185, 185, 185, 185, 185, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 185, 187, 188, 188, 188, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 189]
        ys = [120.69999694824219, 120.69999694824219, 122.69999694824219, 124.69999694824219, 127.69999694824219, 129.6999969482422, 132.6999969482422, 135.6999969482422, 138.6999969482422, 141.6999969482422, 144.6999969482422, 147.6999969482422, 150.6999969482422, 152.6999969482422, 155.6999969482422, 158.6999969482422, 159.6999969482422, 162.6999969482422, 164.6999969482422, 165.6999969482422, 167.6999969482422, 169.6999969482422, 171.6999969482422, 173.6999969482422, 175.6999969482422, 176.6999969482422, 178.6999969482422, 179.6999969482422, 180.6999969482422, 182.6999969482422, 183.6999969482422, 185.6999969482422, 186.6999969482422, 187.6999969482422, 189.6999969482422, 190.6999969482422, 191.6999969482422, 192.6999969482422, 193.6999969482422, 194.6999969482422, 195.6999969482422, 196.6999969482422, 197.6999969482422, 198.6999969482422, 199.6999969482422, 200.6999969482422, 201.6999969482422, 202.6999969482422, 203.6999969482422, 204.6999969482422, 205.6999969482422, 206.6999969482422, 207.6999969482422, 209.6999969482422, 210.6999969482422, 212.6999969482422, 215.6999969482422, 217.6999969482422, 219.6999969482422, 230.6999969482422, 233.6999969482422, 235.6999969482422, 236.6999969482422, 238.6999969482422, 239.6999969482422, 240.6999969482422, 241.6999969482422, 242.6999969482422, 243.6999969482422, 244.6999969482422, 245.6999969482422, 246.6999969482422, 247.6999969482422, 248.6999969482422, 249.6999969482422, 250.6999969482422, 251.6999969482422, 252.6999969482422, 253.6999969482422, 254.6999969482422, 255.6999969482422, 256.6999969482422, 257.6999969482422, 257.6999969482422]

        predicted = self.digit_classifier.classify(xs, ys)
        self.assertEqual(predicted, 1)
